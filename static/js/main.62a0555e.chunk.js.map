{"version":3,"sources":["components/Keypad.js","components/Output.js","lib/evaluate.js","components/Panel.js","App.js","reportWebVitals.js","index.js"],"names":["Keypad","keypress","className","type","class","onClick","map","k","i","Output","text","outputEl","useRef","useEffect","current","scrollTop","scrollHeight","ref","length","evaluate","expression","tokens","matchAll","match","num","parseFloat","isNaN","tokenize","replace","clean","console","log","op1","op2","ops","nums","token","oop","result","process","push","pop","b","a","op","Math","pow","NaN","operate","Panel","useState","setText","key","prev","test","String","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62a0555e.chunk.js","sourcesContent":["function Keypad({ keypress }) {\n  let keys = [\n    \"(\",\n    \")\",\n    \"^\",\n    \"/\",\n    \"*\",\n    \"-\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \".\",\n  ];\n  return (\n    <div className=\"container\">\n      <button type=\"button\" class=\"key-clear\" onClick={() => keypress(\"C\")}>\n        C\n      </button>\n      <button type=\"button\" class=\"key-back\" onClick={() => keypress(\"↩\")}>\n        ↩\n      </button>\n      <button type=\"button\" class=\"key-plus\" onClick={() => keypress(\"+\")}>\n        +\n      </button>\n      <button type=\"button\" class=\"key-0\" onClick={() => keypress(\"0\")}>\n        0\n      </button>\n      <button type=\"button\" class=\"key-equal\" onClick={() => keypress(\"=\")}>\n        =\n      </button>\n      {keys.map((k, i) => (\n        <button type=\"button\" onClick={() => keypress(k)} key={i}>\n          {k}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default Keypad;\n","import { useEffect, useRef } from \"react\";\n\nfunction Output({ text }) {\n  let outputEl = useRef(null);\n\n  // scroll to the bottom\n  useEffect(() => {\n    outputEl.current.scrollTop = outputEl.current.scrollHeight;\n  }, [text]);\n\n  return (\n    <div\n      ref={outputEl}\n      // shrink font-size when amount of text increases\n      className={`output ${text.length >= 10 ? \" smaller\" : \"\"} ${\n        text.length >= 20 ? \" smallest\" : \"\"\n      }`}\n    >\n      {text}\n    </div>\n  );\n}\n\nexport default Output;\n","// returns a number equal to the result of the given expression\nexport default function evaluate(expression) {\n  let tokens = tokenize(clean(expression));\n  console.log(tokens);\n\n  let ops = [];\n  let nums = [];\n\n  for (let token of tokens) {\n    switch (token) {\n      case \"^\":\n      case \"/\":\n      case \"*\":\n      case \"-\":\n      case \"+\":\n        while (ops.length && precedes(ops[ops.length - 1], token)) {\n          let result = process(ops, nums);\n          if (result) return result;\n        }\n        ops.push(token);\n        break;\n      case \"(\":\n        ops.push(\"(\");\n        break;\n      case \")\":\n        while (ops[ops.length - 1] !== \"(\") {\n          let result = process(ops, nums);\n          if (result) return result;\n        }\n        ops.pop();\n        break;\n      default:\n        nums.push(token);\n    }\n  }\n  while (ops.length) {\n    let result = process(ops, nums);\n    if (result) return result;\n  }\n  return nums[0];\n}\n\n// adds * between parenthesis and operands\nfunction clean(expression) {\n  return expression.replace(/(?<=\\d)\\(/, \"*(\").replace(/\\)(?=\\d)/, \")*\");\n}\n\n// pops 2 nums from nums, 1 op from op and pushes the result of performing the op on the nums back to nums\nfunction process(ops, nums) {\n  let b = nums.pop();\n  let result = operate(nums.pop(), b, ops.pop());\n  if (result === \"Err: Division by 0\") return result;\n  nums.push(result);\n  return false;\n}\n\n// returns true if op1 precedes op2 in the order of operations, returns false otherwise\nfunction precedes(op1, op2) {\n  return oop(op1) < oop(op2);\n}\n// returns the order or operations precedence of the operator, lower meaning higher\nfunction oop(op) {\n  if (op === \"^\") return 1;\n  else if (op === \"*\" || op === \"/\") return 2;\n  else return 3;\n}\n\n// returns the result of a op b\n// returns \"Err: Division by 0\" if attempting to divide by 0\nfunction operate(a, b, op) {\n  console.log(a, op, b);\n  switch (op) {\n    case \"^\":\n      return Math.pow(a, b);\n    case \"/\":\n      return b === 0 ? \"Err: Division by 0\" : a / b;\n    case \"*\":\n      return a * b;\n    case \"-\":\n      return a - b;\n    case \"+\":\n      return a + b;\n    default:\n      return NaN;\n  }\n}\n\n// return expression as a list of numbers and operating symbols\nfunction tokenize(expression) {\n  return [...expression.matchAll(/(?:((?<!\\d)-)?\\d*\\.?\\d+)|[()^*/+-]/g)].map(\n    (match) => {\n      let num = parseFloat(match[0]);\n      return isNaN(num) ? match[0] : num;\n    }\n  );\n}\n","import Keypad from \"./Keypad\";\nimport Output from \"./Output\";\nimport { useState } from \"react\";\nimport evaluate from \"./../lib/evaluate\";\n\nfunction Panel() {\n  let [text, setText] = useState(\"\");\n\n  function keypress(key) {\n    let prev = text;\n    if (\n      text === \"NaN\" ||\n      text === \"Infinity\" ||\n      text === \"-Infinity\" ||\n      text === \"Err: Division by 0\"\n    ) {\n      prev = \"\";\n    }\n    switch (key) {\n      case \"C\":\n        setText(\"\");\n        break;\n      case \"(\":\n        // don't put an open paren after a decimal point\n        if (!/\\.$/.test(prev)) setText(prev + \"(\");\n        break;\n      case \")\":\n        // only put a close paren if there is an open paren that has not been closed\n        if (\n          /(\\d|\\))$/.test(prev) &&\n          (prev.match(/\\(/g) || []).length > (prev.match(/\\)/g) || []).length\n        )\n          setText(prev + \")\");\n        break;\n      case \"↩\":\n        setText(prev.replace(/.$/, \"\"));\n        break;\n      case \"^\":\n      case \"/\":\n      case \"*\":\n      case \"+\":\n        // only add an operator after a number or close paren\n        if (/(\\d|\\))$/.test(prev)) setText(prev + key);\n        break;\n      case \"-\":\n        // preceded by + change to minus\n        if (/\\+$/.test(prev)) setText(prev.replace(/.$/, \"-\"));\n        // preceded by - change to plus\n        else if (/\\d-$/.test(prev)) setText(prev.replace(/.$/, \"+\"));\n        // preceded by - but that is the whole string\n        else if (/^-$/.test(prev)) setText(prev.replace(/.$/, \"\"));\n        else setText(prev + \"-\");\n        break;\n      case \".\":\n        // don't put two decimal points in a row\n        if (!/\\.\\d*$/.test(prev)) setText(prev + \".\");\n        break;\n      case \"=\":\n        // evaluate if the expression ends in a number or a close paren\n        // and also that the number of close parens matches the number of open parens\n        if (\n          /(\\d|\\))$/.test(prev) &&\n          (prev.match(/\\(/g) || []).length ===\n            (prev.match(/\\)/g) || []).length\n        )\n          setText(String(evaluate(prev)).replace(/e\\+?/, \"*10^\"));\n        break;\n      default:\n        setText(prev + key);\n    }\n  }\n\n  return (\n    <span className=\"panel\">\n      <Output text={text}></Output>\n      <Keypad keypress={keypress}></Keypad>\n    </span>\n  );\n}\n\nexport default Panel;\n","import \"./assets/css/main.css\";\nimport Panel from \"./components/Panel\";\n\nfunction App() {\n  return (\n    <div className=\"app light\">\n      <Panel></Panel>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}